#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BH.CodeGen.Templates.Code
{
using System;

#line 5 "EntityRepo.cshtml"
using System.Collections.Generic;

#line default
#line hidden

#line 3 "EntityRepo.cshtml"
using System.Linq;

#line default
#line hidden

#line 6 "EntityRepo.cshtml"
using System.Text;

#line default
#line hidden

#line 4 "EntityRepo.cshtml"
using System.Collections;

#line default
#line hidden

#line 7 "EntityRepo.cshtml"
using BH.CodeGen;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class EntityRepo : EntityRepoBase
{

#line hidden

#line 1 "EntityRepo.cshtml"
public BH.CodeGen.Model.Settings Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral(@"using System;
using Dapper;
using BH.Models;
using BH.Models.ViewModels;
using BH.Repositories.Connections;
using BH.Repositories.Connections.Interface;
using BH.Repositories.Interface;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using System.Data;


namespace BH.Repositories
{
    public class ");


#line 22 "EntityRepo.cshtml"
            Write(Model.RepoName);


#line default
#line hidden
WriteLiteral(" :BHConnectionBase, I");


#line 22 "EntityRepo.cshtml"
                                                 Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\n    {\n        private readonly ILogger<");


#line 24 "EntityRepo.cshtml"
                             Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("> _logger;\n        public ");


#line 25 "EntityRepo.cshtml"
           Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("(IDbConnectionFactory dbConnectionFactory, ILogger<");


#line 25 "EntityRepo.cshtml"
                                                                               Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("> logger)\n            :base(dbConnectionFactory)\n        {\n            _logger = " +
"logger;\n        }\n\n        public async Task<int> Save");


#line 31 "EntityRepo.cshtml"
                               Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("(");


#line 31 "EntityRepo.cshtml"
                                                  Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("RequestModel model)\n        {\n            _logger.LogInformation(\"Going to execut" +
"e Method: Save");


#line 33 "EntityRepo.cshtml"
                                                             Write(Model.ClassName);


#line default
#line hidden
WriteLiteral(", Class: ");


#line 33 "EntityRepo.cshtml"
                                                                                       Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n\n            try\n            {\n                var param = new DynamicParamet" +
"ers();\n");


#line 38 "EntityRepo.cshtml"
                

#line default
#line hidden

#line 38 "EntityRepo.cshtml"
                 foreach (var column in Model.Properties)
                    {
                        if (!column.Name.Equals("CreatedBy") && !column.Name.Equals("CreatedDate")
                                                             && !column.Name.Equals("ModifiedDate"))
                        {
                            var line1 = string.Format("\t\t\t    param.Add(\"@{0}\", model.{0}, DbType.{1}, ParameterDirection.Input, null);\n",
                                column.Name, Converter.EnumStringFromValue(Converter.GetDbTypeFromSqlType(column.Type)));
                            WriteLiteral(line1);
                        }
                    }


#line default
#line hidden
WriteLiteral("\n                return await Connection\n                    .ExecuteScalarAsync<" +
"int>(\"Save");


#line 50 "EntityRepo.cshtml"
                                              Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("\", param, commandType: CommandType.StoredProcedure);\n            }\n            ca" +
"tch (Exception ex)\n            {\n                _logger.LogError($\"Exception oc" +
"curred in Method: Save");


#line 54 "EntityRepo.cshtml"
                                                                 Write(Model.ClassName);


#line default
#line hidden
WriteLiteral(", Class: ");


#line 54 "EntityRepo.cshtml"
                                                                                           Write(Model.RepoName);


#line default
#line hidden
WriteLiteral(", error :{ex.Message}\");\n                return -1;\n            }\n        }\n\n    " +
"    public async Task<ResultModel<");


#line 59 "EntityRepo.cshtml"
                                  Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>> Get");


#line 59 "EntityRepo.cshtml"
                                                               Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("ById(int id)\n        {\n            ResultModel<");


#line 61 "EntityRepo.cshtml"
                    Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model> resultModel = new ResultModel<");


#line 61 "EntityRepo.cshtml"
                                                                           Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>();\n            _logger.LogInformation(\"Going to execute Method: Save");


#line 62 "EntityRepo.cshtml"
                                                             Write(Model.ClassName);


#line default
#line hidden
WriteLiteral(", Class: ");


#line 62 "EntityRepo.cshtml"
                                                                                       Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n            try\n            {\n                var param = new DynamicParamete" +
"rs();\n\n");


#line 67 "EntityRepo.cshtml"
                

#line default
#line hidden

#line 67 "EntityRepo.cshtml"
                  
                    var line = string.Format("\t\t\t    param.Add(\"@Id\", id, DbType.Int32, ParameterDirection.Input, null);\n");
                    WriteLiteral(line);
                

#line default
#line hidden
WriteLiteral("\n\n                resultModel.Data = await Connection\n                    .QueryF" +
"irstOrDefaultAsync<");


#line 73 "EntityRepo.cshtml"
                                          Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>(\"Select");


#line 73 "EntityRepo.cshtml"
                                                                          Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("ById\", param, commandType: CommandType.StoredProcedure);\n                resultMo" +
"del.Message = \"Executed successfully\";\n                resultModel.IsSuccess = t" +
"rue;\n                _logger.LogInformation(\"Execution completed Method: Get");


#line 76 "EntityRepo.cshtml"
                                                                   Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("ById, Class: ");


#line 76 "EntityRepo.cshtml"
                                                                                                 Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n                return resultModel;\n            }\n            catch (Exceptio" +
"n ex)\n            {\n                _logger.LogError($\"Exception occurred in Met" +
"hod: Get");


#line 81 "EntityRepo.cshtml"
                                                                Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("ById, Class: ");


#line 81 "EntityRepo.cshtml"
                                                                                              Write(Model.RepoName);


#line default
#line hidden
WriteLiteral(@", error :{ex.Message}"");
                resultModel.Data = null;
                resultModel.Message = ""Something went wrong"";
                resultModel.IsSuccess = false;
                resultModel.ErrorMessages = ex.Message.Split(Environment.NewLine);
                return resultModel;
            }
        }

        public async Task<ResultModel<List<");


#line 90 "EntityRepo.cshtml"
                                       Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>>> GetAll");


#line 90 "EntityRepo.cshtml"
                                                                        Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("(");


#line 90 "EntityRepo.cshtml"
                                                                                           Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("ListModel model)\n        {\n            ResultModel<List<");


#line 92 "EntityRepo.cshtml"
                         Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>> resultModel = new ResultModel<List<");


#line 92 "EntityRepo.cshtml"
                                                                                      Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>>();\n            _logger.LogInformation(\"Going to execute Method: GetAll");


#line 93 "EntityRepo.cshtml"
                                                               Write(Model.ClassName);


#line default
#line hidden
WriteLiteral(", Class: ");


#line 93 "EntityRepo.cshtml"
                                                                                         Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n            try\n            {\n                var param = new DynamicParamete" +
"rs();\n");


#line 97 "EntityRepo.cshtml"
                

#line default
#line hidden

#line 97 "EntityRepo.cshtml"
                  
                    var line2 = string.Format("\t\t\t    param.Add(\"@Page\", model.Page, DbType.Int32, ParameterDirection.Input, null);\n");
                    line2 = line2 + string.Format("\t\t\t    param.Add(\"@PageSize\", model.PageSize, DbType.Int32, ParameterDirection.Input, null);\n");
                    line2 = line2 + string.Format("\t\t\t    param.Add(\"@OrganizationId\", model.OrganizationId, DbType.Int32, ParameterDirection.Input, null);\n");
                    WriteLiteral(line2);
                

#line default
#line hidden
WriteLiteral("\n                var sqlWhereClause = model.GetSearchFilterClause();\n");


#line 104 "EntityRepo.cshtml"
                

#line default
#line hidden

#line 104 "EntityRepo.cshtml"
                  
                    var line3 = string.Format("\t\t\t    param.Add(\"@SqlWhereClause\", sqlWhereClause, DbType.String, ParameterDirection.Input, null);\n");
                    WriteLiteral(line3);
                

#line default
#line hidden
WriteLiteral("\n\n                resultModel.Data = (await Connection\n                    .Query" +
"Async<");


#line 110 "EntityRepo.cshtml"
                            Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Model>(\"Select");


#line 110 "EntityRepo.cshtml"
                                                            Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("\", param, commandType: CommandType.StoredProcedure)).ToList();\n                re" +
"sultModel.Message = \"Executed successfully\";\n                resultModel.IsSucce" +
"ss = true;\n                _logger.LogInformation(\"Execution completed Method: G" +
"etAll");


#line 113 "EntityRepo.cshtml"
                                                                      Write(Model.ClassName);


#line default
#line hidden
WriteLiteral(", Class: ");


#line 113 "EntityRepo.cshtml"
                                                                                                Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n                return resultModel;\n            }\n            catch (Exceptio" +
"n ex)\n            {\n                _logger.LogError($\"Exception occurred in Met" +
"hod: GetAll");


#line 118 "EntityRepo.cshtml"
                                                                   Write(Model.ClassName);


#line default
#line hidden
WriteLiteral(", Class: ");


#line 118 "EntityRepo.cshtml"
                                                                                             Write(Model.RepoName);


#line default
#line hidden
WriteLiteral(@", error :{ex.Message}"");
                resultModel.Data = null;
                resultModel.Message = ""Something went wrong"";
                resultModel.IsSuccess = false;
                resultModel.ErrorMessages = ex.Message.Split(Environment.NewLine);
                return resultModel;
            }
        }

        public async Task<ResultModel<int>> GetAll");


#line 127 "EntityRepo.cshtml"
                                              Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Count(");


#line 127 "EntityRepo.cshtml"
                                                                      Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("ListModel model)\n        {\n            ResultModel<int> resultModel = new ResultM" +
"odel<int>();\n            _logger.LogInformation(\"Going to execute Method: GetAll" +
"");


#line 130 "EntityRepo.cshtml"
                                                               Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Count, Class: ");


#line 130 "EntityRepo.cshtml"
                                                                                              Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n            try\n            {\n                var param = new DynamicParamete" +
"rs();\n");


#line 134 "EntityRepo.cshtml"
                

#line default
#line hidden

#line 134 "EntityRepo.cshtml"
                  
                    var line4 = string.Format("\t\t\t    param.Add(\"@IsCountCalled\", true, DbType.Boolean, ParameterDirection.Input, null);\n");
                    line4 = line4 + string.Format("\t\t\t    param.Add(\"@OrganizationId\", model.OrganizationId, DbType.Int32, ParameterDirection.Input, null);\n");
                    WriteLiteral(line4);
                

#line default
#line hidden
WriteLiteral("\n                var sqlWhereClause = model.GetSearchFilterClause();\n");


#line 140 "EntityRepo.cshtml"
                

#line default
#line hidden

#line 140 "EntityRepo.cshtml"
                  
                    var line5 = string.Format("\t\t\t    param.Add(\"@SqlWhereClause\", sqlWhereClause, DbType.String, ParameterDirection.Input, null);\n");
                    WriteLiteral(line5);
                

#line default
#line hidden
WriteLiteral("\n\n                resultModel.Data = await Connection\n                    .QueryF" +
"irstAsync<int>(\"Select");


#line 146 "EntityRepo.cshtml"
                                             Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("\", param, commandType: CommandType.StoredProcedure);\n                resultModel." +
"Message = \"Executed successfully\";\n                resultModel.IsSuccess = true;" +
"\n                _logger.LogInformation(\"Execution completed Method: GetAll");


#line 149 "EntityRepo.cshtml"
                                                                      Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Count, Class: ");


#line 149 "EntityRepo.cshtml"
                                                                                                     Write(Model.RepoName);


#line default
#line hidden
WriteLiteral("\");\n                return resultModel;\n            }\n            catch (Exceptio" +
"n ex)\n            {\n                _logger.LogError($\"Exception occurred in Met" +
"hod: GetAll");


#line 154 "EntityRepo.cshtml"
                                                                   Write(Model.ClassName);


#line default
#line hidden
WriteLiteral("Count, Class: ");


#line 154 "EntityRepo.cshtml"
                                                                                                  Write(Model.RepoName);


#line default
#line hidden
WriteLiteral(@", error :{ex.Message}"");
                resultModel.Data = -1;
                resultModel.Message = ""Something went wrong"";
                resultModel.IsSuccess = false;
                resultModel.ErrorMessages = ex.Message.Split(Environment.NewLine);
                return resultModel;
            }
        }
    }
}


");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class EntityRepoBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
